// Neuron AI - –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Neuron
class NeuronAI {
    constructor() {
        this.isActive = false;
        this.chatHistory = [];
        this.setupEventListeners();
        this.loadChatHistory();
        this.initAI();
    }

    initAI() {
        this.responses = {
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ
            '–ø–æ–º–æ—â—å': this.showHelp.bind(this),
            '–∏–≥—Ä—ã': this.openGames.bind(this),
            '–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä': this.openConverter.bind(this),
            '–∑–∞–º–µ—Ç–∫–∏': this.openNotes.bind(this),
            '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ': this.openSchedule.bind(this),
            '–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π': this.openPasswordGenerator.bind(this),
            '—Å—Ç—É–¥—è': this.openNeuronStudy.bind(this),
            
            // –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
            '–ø—Ä–∏–≤–µ—Ç': () => this.sendResponse('–ü—Ä–∏–≤–µ—Ç! –Ø Neuron AI. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'),
            '–∫–∞–∫ –¥–µ–ª–∞': () => this.sendResponse('–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å —ç–∫–æ—Å–∏—Å—Ç–µ–º–æ–π Neuron! üöÄ'),
            '—Å–ø–∞—Å–∏–±–æ': () => this.sendResponse('–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! üòä'),
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
            '–∫—Ç–æ —Ç—ã': () => this.sendResponse('–Ø Neuron AI - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Neuron. –°–æ–∑–¥–∞–Ω —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö!'),
            '—á—Ç–æ —Ç–∞–∫–æ–µ neuron': () => this.sendResponse('Neuron Ecosystem - —ç—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª–µ–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∏–≥—Ä, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–æ–ª–æ–¥–æ–π –∫–æ–º–∞–Ω–¥–æ–π. –í–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç, –∏–≥—Ä—ã, –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!'),
            '–≤–æ–∑—Ä–∞—Å—Ç': () => this.sendResponse('–ù–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –ø–æ 14 –ª–µ—Ç! –ú—ã —Å–æ–∑–¥–∞–µ–º –∫—Ä—É—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —é–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç üéØ'),
            '—Å–æ–∑–¥–∞—Ç–µ–ª—å': () => this.sendResponse('Neuron Ecosystem —Å–æ–∑–¥–∞–Ω –º–æ–ª–æ–¥–æ–π –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ –¥–≤—É—Ö —á–µ–ª–æ–≤–µ–∫ –ø–æ 14 –ª–µ—Ç! –ú—ã —Ä–∞–∑–≤–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å –ª—é–±–æ–≤—å—é ‚ù§Ô∏è'),
        };
    }

    async processMessage(input) {
        const message = input.toLowerCase().trim();
        this.addMessage(message, 'user');
        
        this.showTypingIndicator();
        
        const localResponse = this.findLocalResponse(message);
        if (localResponse) {
            setTimeout(() => {
                this.hideTypingIndicator();
                localResponse();
            }, 1000);
            return;
        }
        
        setTimeout(() => {
            this.hideTypingIndicator();
            const aiResponse = this.generateSmartResponse(message);
            this.sendResponse(aiResponse);
        }, 1500);
    }

    findLocalResponse(message) {
        for (const [key, response] of Object.entries(this.responses)) {
            if (message.includes(key)) {
                return response;
            }
        }
        return null;
    }

    generateSmartResponse(message) {
        if (message.includes('–ø–æ–≥–æ–¥–∞')) {
            return '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã!';
        }
        
        if (message.includes('–≤—Ä–µ–º—è')) {
            return `–°–µ–π—á–∞—Å ${new Date().toLocaleTimeString('ru-RU')}`;
        }
        
        if (this.containsQuestion(message)) {
            const responses = [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ö–∞–∫ AI-–ø–æ–º–æ—â–Ω–∏–∫, —è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø–æ–º–æ—â–∏ —Å —ç–∫–æ—Å–∏—Å—Ç–µ–º–æ–π Neuron. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –Ω–∞—à–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏!",
                "–ü–æ–∫–∞ —è –ª—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö Neuron Ecosystem. –°–ø—Ä–æ—Å–∏—Ç–µ –æ –∏–≥—Ä–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–µ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –Ω–∞—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö!",
                "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ - –æ–Ω–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã –∏ –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã!",
                "–ö–∞–∫ AI Neuron, —è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å. –ê –ø–æ–∫–∞ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –Ω–∞—à–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ - –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ! üöÄ"
            ];
            return responses[Math.floor(Math.random() * responses.length)];
        }
        
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ù–æ —è –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ Neuron! –°–ø—Ä–æ—Å–∏—Ç–µ –æ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö üéØ";
    }

    containsQuestion(text) {
        const questionWords = ['–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫—Ç–æ', '—á–µ–π', '–∫–æ—Ç–æ—Ä—ã–π'];
        return questionWords.some(word => text.toLowerCase().includes(word)) || text.includes('?');
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ
    showHelp() {
        const helpText = `
üéØ **Neuron Ecosystem - –ü–æ–ª–Ω—ã–π –≥–∏–¥:**

üì± **–û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:**
‚Ä¢ üéÆ Game Hub - –∫–æ–ª–ª–µ–∫—Ü–∏—è –∏–≥—Ä
‚Ä¢ üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç 
‚Ä¢ üìù –ó–∞–º–µ—Ç–∫–∏ –∏ –æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä
‚Ä¢ üéì Neuron Study - —É—á–µ–±–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π

üí° **–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ:**
"–æ—Ç–∫—Ä–æ–π –∏–≥—Ä—ã", "–ø–æ–∫–∞–∂–∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä", "–∑–∞–º–µ—Ç–∫–∏"

üîß **–ö–æ–º–∞–Ω–¥—ã:**
"–ø–æ–º–æ—â—å" - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
"–ø—Ä–∏–≤–µ—Ç" - –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è

–°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –∫–æ–º–∞–Ω–¥–æ–π Neuron (14 –ª–µ—Ç)
        `;
        this.sendResponse(helpText);
    }

    openGames() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é Game Hub... üéÆ');
        setTimeout(() => {
            window.open('https://neuron-ecosystem.github.io/Game-Hub/', '_blank');
        }, 1000);
    }

    openConverter() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç... üí±');
        setTimeout(() => {
            window.open('https://neuron-ecosystem.github.io/Unit-Converter/', '_blank');
        }, 1000);
    }

    openNotes() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é –∑–∞–º–µ—Ç–∫–∏... üìù');
        setTimeout(() => {
            window.open('https://neuron-p2p.ru/notes.html', '_blank');
        }, 1000);
    }

    openSchedule() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é Neuron Study... üéì');
        setTimeout(() => {
            window.open('https://neuron-ecosystem.github.io/Neuron-Study/', '_blank');
        }, 1000);
    }

    openPasswordGenerator() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π... üîê');
        setTimeout(() => {
            window.open('https://neuron-ecosystem.github.io/Password-Generator/', '_blank');
        }, 1000);
    }

    openNeuronStudy() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é Neuron Study... üìö');
        setTimeout(() => {
            window.open('https://neuron-ecosystem.github.io/Neuron-Study/', '_blank');
        }, 1000);
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º
    addMessage(text, sender) {
        this.chatHistory.push({ text, sender, timestamp: Date.now() });
        this.renderMessage(text, sender);
        this.saveChatHistory();
    }

    renderMessage(text, sender) {
        const chat = document.getElementById('aiChat');
        const messageDiv = document.createElement('div');
        messageDiv.className = `ai-message ${sender}-message`;
        
        const avatar = sender === 'user' ? 'üë§' : 'üß†';
        messageDiv.innerHTML = `
            <div class="message-avatar">${avatar}</div>
            <div class="message-content">
                <p>${text}</p>
            </div>
        `;
        
        chat.appendChild(messageDiv);
        chat.scrollTop = chat.scrollHeight;
    }

    sendResponse(text) {
        this.addMessage(text, 'bot');
    }

    showTypingIndicator() {
        const chat = document.getElementById('aiChat');
        const typingDiv = document.createElement('div');
        typingDiv.className = 'ai-message bot-message';
        typingDiv.id = 'typingIndicator';
        typingDiv.innerHTML = `
            <div class="message-avatar">üß†</div>
            <div class="message-content">
                <div class="typing-indicator">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>
        `;
        chat.appendChild(typingDiv);
        chat.scrollTop = chat.scrollHeight;
    }

    hideTypingIndicator() {
        const typing = document.getElementById('typingIndicator');
        if (typing) typing.remove();
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    saveChatHistory() {
        if (this.chatHistory.length > 50) {
            this.chatHistory = this.chatHistory.slice(-50);
        }
        localStorage.setItem('neuronAI_chat', JSON.stringify(this.chatHistory));
    }

    loadChatHistory() {
        try {
            const saved = localStorage.getItem('neuronAI_chat');
            if (saved) {
                this.chatHistory = JSON.parse(saved);
                this.renderChatHistory();
            }
        } catch (e) {
            this.chatHistory = [];
        }
    }

    renderChatHistory() {
        const chat = document.getElementById('aiChat');
        chat.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const welcomeMsg = document.createElement('div');
        welcomeMsg.className = 'ai-message bot-message';
        welcomeMsg.innerHTML = `
            <div class="message-avatar">üß†</div>
            <div class="message-content">
                <p>–ü—Ä–∏–≤–µ—Ç! –Ø Neuron AI - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ Neuron. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?</p>
                <div class="quick-commands">
                    <button onclick="sendQuickCommand('–ø–æ–º–æ—â—å')">üÜò –ü–æ–º–æ—â—å</button>
                    <button onclick="sendQuickCommand('–∏–≥—Ä—ã')">üéÆ –ò–≥—Ä—ã</button>
                    <button onclick="sendQuickCommand('–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä')">üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä</button>
                    <button onclick="sendQuickCommand('–∑–∞–º–µ—Ç–∫–∏')">üìù –ó–∞–º–µ—Ç–∫–∏</button>
                </div>
            </div>
        `;
        chat.appendChild(welcomeMsg);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        this.chatHistory.forEach(msg => {
            this.renderMessage(msg.text, msg.sender);
        });
    }

    setupEventListeners() {
        // –ê–≤—Ç–æ-—Ñ–æ–∫—É—Å –Ω–∞ input –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        const widget = document.getElementById('aiWidget');
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.attributeName === 'class') {
                    if (widget.classList.contains('active')) {
                        setTimeout(() => {
                            document.getElementById('aiInput').focus();
                        }, 300);
                    }
                }
            });
        });
        observer.observe(widget, { attributes: true });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
let neuronAI;

function toggleAI() {
    const widget = document.getElementById('aiWidget');
    widget.classList.toggle('active');
    
    if (widget.classList.contains('active')) {
        setTimeout(() => {
            document.getElementById('aiInput').focus();
        }, 300);
    }
}

function sendAIMessage() {
    const input = document.getElementById('aiInput');
    const message = input.value.trim();
    
    if (message) {
        neuronAI.processMessage(message);
        input.value = '';
    }
}

function handleAIInput(event) {
    if (event.key === 'Enter') {
        sendAIMessage();
    }
}

function sendQuickCommand(command) {
    neuronAI.processMessage(command);
}

function startVoiceInput() {
    if ('webkitSpeechRecognition' in window) {
        const recognition = new webkitSpeechRecognition();
        recognition.lang = 'ru-RU';
        recognition.onresult = (event) => {
            const transcript = event.results[0][0].transcript;
            document.getElementById('aiInput').value = transcript;
            sendAIMessage();
        };
        recognition.start();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
        neuronAI.sendResponse('üé§ –°–ª—É—à–∞—é... –ì–æ–≤–æ—Ä–∏—Ç–µ!');
    } else {
        neuronAI.sendResponse('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    }
}

function clearChat() {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?')) {
        neuronAI.chatHistory = [];
        neuronAI.saveChatHistory();
        document.getElementById('aiChat').innerHTML = `
            <div class="ai-message bot-message">
                <div class="message-avatar">üß†</div>
                <div class="message-content">
                    <p>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?</p>
                    <div class="quick-commands">
                        <button onclick="sendQuickCommand('–ø–æ–º–æ—â—å')">üÜò –ü–æ–º–æ—â—å</button>
                        <button onclick="sendQuickCommand('–∏–≥—Ä—ã')">üéÆ –ò–≥—Ä—ã</button>
                        <button onclick="sendQuickCommand('–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä')">üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä</button>
                        <button onclick="sendQuickCommand('–∑–∞–º–µ—Ç–∫–∏')">üìù –ó–∞–º–µ—Ç–∫–∏</button>
                    </div>
                </div>
            </div>
        `;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    neuronAI = new NeuronAI();
});
