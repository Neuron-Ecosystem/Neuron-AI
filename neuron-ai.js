// Neuron AI - –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Neuron
class NeuronAI {
    constructor() {
        this.isActive = false;
        this.chatHistory = [];
        this.conversationContext = [];
        this.maxContextLength = 10; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        this.setupEventListeners();
        this.loadChatHistory();
        this.initAI();
    }

    initAI() {
        this.responses = {
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ
            '–ø–æ–º–æ—â—å': this.showHelp.bind(this),
            '–∏–≥—Ä—ã': this.openGames.bind(this),
            '–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä': this.openConverter.bind(this),
            '–∑–∞–º–µ—Ç–∫–∏': this.openNotes.bind(this),
            '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ': this.openSchedule.bind(this),
            '–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π': this.openPasswordGenerator.bind(this),
            '—Å—Ç—É–¥—è': this.openNeuronStudy.bind(this),
            '–±—é–¥–∂–µ—Ç': this.openNeuronBudget.bind(this),
            '—Å—Ç—É–¥–∏—è': this.openDigitalStudio.bind(this),
            'digital studio': this.openDigitalStudio.bind(this),
            '—Å–∞–π—Ç': this.openMainSite.bind(this),
            '–≥–ª–∞–≤–Ω–∞—è': this.openMainSite.bind(this),
            '–æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç': this.openMainSite.bind(this),
            '–Ω–µ–π—Ä–æ–Ω': this.openMainSite.bind(this),
            
            // –°–æ—Ü—Å–µ—Ç–∏
            '—Ç–µ–ª–µ–≥—Ä–∞–º': this.openTelegram.bind(this),
            '–≤–∫': this.openVK.bind(this),
            '—Ç–∏–∫—Ç–æ–∫': this.openTikTok.bind(this),
            '—Å–æ—Ü—Å–µ—Ç–∏': this.showSocials.bind(this),
            'tiktok': this.openTikTok.bind(this),
            
            // –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            '–ø–æ—Å—á–∏—Ç–∞–π': this.calculateMath.bind(this),
            '—Ä–µ—à–∏': this.calculateMath.bind(this),
            '—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç': this.calculateMath.bind(this),
            '–≤—ã—á–∏—Å–ª–∏': this.calculateMath.bind(this),
            '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä': this.calculateMath.bind(this),
            '—Å–ª–æ–∂–∏': this.calculateMath.bind(this),
            '—É–º–Ω–æ–∂—å': this.calculateMath.bind(this),
            '—Ä–∞–∑–¥–µ–ª–∏': this.calculateMath.bind(this),
            '–≤—ã—á—Ç–∏': this.calculateMath.bind(this),
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º
            '–ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω': this.toggleFullscreen.bind(this),
            '–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º': this.toggleFullscreen.bind(this),
            '–æ—á–∏—Å—Ç–∏ —á–∞—Ç': this.clearChat.bind(this),
            '–Ω–æ–≤–∞—è —Ç–µ–º–∞': this.clearContext.bind(this),
            
            // –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
            '–ø—Ä–∏–≤–µ—Ç': () => this.sendResponse(this.getGreeting()),
            '–∫–∞–∫ –¥–µ–ª–∞': () => this.sendResponse(this.getMood()),
            '—Å–ø–∞—Å–∏–±–æ': () => this.sendResponse(this.getThanksResponse()),
            '–ø–æ–∫–∞': () => this.sendResponse(this.getGoodbye()),
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
            '–∫—Ç–æ —Ç—ã': () => this.sendResponse(this.getAboutMe()),
            '—á—Ç–æ —Ç–∞–∫–æ–µ neuron': () => this.sendResponse(this.getAboutNeuron()),
            '–≤–æ–∑—Ä–∞—Å—Ç': () => this.sendResponse('–ù–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –ø–æ 14 –ª–µ—Ç! –ú—ã —Å–æ–∑–¥–∞–µ–º –∫—Ä—É—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —é–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç üéØ\n\n–≠—Ç–æ –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç - –Ω–µ –ø—Ä–µ–≥—Ä–∞–¥–∞ –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π!'),
            '—Å–æ–∑–¥–∞—Ç–µ–ª—å': () => this.sendResponse('Neuron Ecosystem —Å–æ–∑–¥–∞–Ω –º–æ–ª–æ–¥–æ–π –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ –¥–≤—É—Ö —á–µ–ª–æ–≤–µ–∫ –ø–æ 14 –ª–µ—Ç! üí™\n\n–ú—ã —Å–∞–º–∏ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∑–∞–π–Ω, –ø–∏—à–µ–º –∫–æ–¥ –∏ –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º –Ω–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã!'),
            
            // –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ': () => this.sendResponse(this.getAboutMeExtended()),
            '—á—Ç–æ —É–º–µ–µ—à—å': () => this.sendResponse(this.getCapabilities()),
            '—à—É—Ç–∫–∞': () => this.sendResponse(this.getJoke()),
            '—Å–æ–≤–µ—Ç': () => this.sendResponse(this.getAdvice()),
            '—Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É': () => this.sendResponse(this.getJoke()),
            '–¥–∞–π —Å–æ–≤–µ—Ç': () => this.sendResponse(this.getAdvice()),
        };
    }

    async processMessage(input) {
        const message = input.toLowerCase().trim();
        this.addMessage(message, 'user');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        this.addToContext(message, 'user');
        
        this.showTypingIndicator();
        
        const localResponse = this.findLocalResponse(message);
        if (localResponse) {
            setTimeout(() => {
                this.hideTypingIndicator();
                localResponse();
            }, 1000);
            return;
        }
        
        setTimeout(() => {
            this.hideTypingIndicator();
            const aiResponse = this.generateContextAwareResponse(message);
            this.sendResponse(aiResponse);
        }, 1500);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    addToContext(message, sender) {
        this.conversationContext.push({
            text: message,
            sender: sender,
            timestamp: Date.now()
        });
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (this.conversationContext.length > this.maxContextLength) {
            this.conversationContext = this.conversationContext.slice(-this.maxContextLength);
        }
        
        this.saveContext();
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    generateContextAwareResponse(message) {
        const context = this.getRelevantContext();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if (this.isFollowUpQuestion(message, context)) {
            return this.generateFollowUpResponse(message, context);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        if (this.containsMath(message)) {
            this.calculateMath(message);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if (this.isGreeting(message)) {
            return this.getContextualGreeting(context);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—â–∞–Ω–∏—è
        if (this.isGoodbye(message)) {
            return this.getContextualGoodbye(context);
        }
        
        // –õ–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        if (this.isPersonalQuestion(message)) {
            return this.getPersonalResponse();
        }
        
        // –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        if (this.containsQuestion(message)) {
            return this.getContextualQuestionResponse(message, context);
        }
        
        // –û—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±–µ—Å–µ–¥—ã
        return this.getContextualConversationalResponse(message, context);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    getRelevantContext() {
        if (this.conversationContext.length === 0) return [];
        
        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        return this.conversationContext.slice(-5);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–µ–º—ã
    isFollowUpQuestion(message, context) {
        if (context.length < 2) return false;
        
        const lastUserMessage = context[context.length - 2]; // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const currentMessage = message.toLowerCase();
        
        const followUpIndicators = [
            '–∞', '–∏', '–µ—â–µ', '—Ç–∞–∫–∂–µ', '–∫—Å—Ç–∞—Ç–∏', '–∫—Ä–æ–º–µ —Ç–æ–≥–æ',
            '—á—Ç–æ –Ω–∞—Å—á–µ—Ç', '–∞ –∫–∞–∫ –∂–µ', '–∞ –µ—Å–ª–∏', '–∞ –ø–æ—á–µ–º—É',
            '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–æ–±—ä—è—Å–Ω–∏', '—É—Ç–æ—á–Ω–∏'
        ];
        
        return followUpIndicators.some(indicator => 
            currentMessage.includes(indicator)
        ) || this.isDirectReference(lastUserMessage.text, currentMessage);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    isDirectReference(previousMessage, currentMessage) {
        const references = ['—ç—Ç–æ', '—Ç–æ', '—Ç–∞–∫–æ–π', '—Ç–∞–∫–∞—è', '—Ç–∞–∫–æ–µ', '—Ç–∞–∫–∏–µ', '–æ–Ω', '–æ–Ω–∞', '–æ–Ω–æ', '–æ–Ω–∏'];
        return references.some(ref => currentMessage.includes(ref)) && 
               previousMessage.length > 10; // –¢–æ–ª—å–∫–æ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞-–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    generateFollowUpResponse(message, context) {
        const lastUserMessage = context[context.length - 2].text;
        const lastBotMessage = context[context.length - 1].text;
        
        if (lastUserMessage.includes('–∏–≥—Ä') || lastBotMessage.includes('–∏–≥—Ä')) {
            return this.getGamesFollowUp(message);
        }
        
        if (lastUserMessage.includes('–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä') || lastBotMessage.includes('–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä')) {
            return "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 150+ –≤–∞–ª—é—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ–ª–∞–π–Ω! –•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?";
        }
        
        if (lastUserMessage.includes('–∑–∞–º–µ—Ç–∫') || lastBotMessage.includes('–∑–∞–º–µ—Ç–∫')) {
            return "–í –∑–∞–º–µ—Ç–∫–∞—Ö –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏ –¥–µ–ª, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞–∂–Ω—ã–µ –º—ã—Å–ª–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –∏—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º!";
        }
        
        if (lastUserMessage.includes('–±—é–¥–∂–µ—Ç') || lastBotMessage.includes('–±—é–¥–∂–µ—Ç')) {
            return "Neuron Budget –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã, —Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏!";
        }
        
        return "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–æ–º? –ò–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ—à—å –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤?";
    }

    // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–º—ã –∏–≥—Ä
    getGamesFollowUp(message) {
        if (message.includes('2048')) {
            return "2048 - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞! –ù—É–∂–Ω–æ —Å–æ–µ–¥–∏–Ω—è—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —á–∏—Å–ª–∞ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 2048. –û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è –º–æ–∑–≥–∞!";
        }
        
        if (message.includes('memory') || message.includes('–ø–∞–º—è—Ç')) {
            return "Memory Cards —Ä–∞–∑–≤–∏–≤–∞—é—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ –ø–∞–º—è—Ç—å! –ù–∞–π–¥–∏ –≤—Å–µ –ø–∞—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!";
        }
        
        if (message.includes('–º–∞—Ç–µ–º–∞') || message.includes('—Å—á–∏—Ç–∞')) {
            return "Math Challenge - –≤–µ—Å–µ–ª–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞! –†–µ—à–∞–π –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ –≤—Ä–µ–º—è –∏ —Å—Ç–∞–≤—å —Ä–µ–∫–æ—Ä–¥—ã!";
        }
        
        return "–í Game Hub –µ—Å—Ç—å –∏–≥—Ä—ã –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å: –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏, –∞—Ä–∫–∞–¥—ã, –æ–±—É—á–∞—é—â–∏–µ! –ö–∞–∫—É—é —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?";
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    getContextualGreeting(context) {
        if (context.length > 2) {
            const timeSinceLastMessage = Date.now() - context[context.length - 1].timestamp;
            const minutesAgo = Math.floor(timeSinceLastMessage / 60000);
            
            if (minutesAgo < 5) {
                return "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ü—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä? üòä";
            } else if (minutesAgo < 30) {
                return "–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞! üåü";
            }
        }
        
        return this.getGreeting();
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–æ—â–∞–Ω–∏—è
    getContextualGoodbye(context) {
        const conversationLength = context.filter(msg => msg.sender === 'user').length;
        
        if (conversationLength > 3) {
            return "–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è! –ù–∞–¥–µ—é—Å—å, —è –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è! ü§ó";
        }
        
        return this.getGoodbye();
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    getContextualQuestionResponse(message, context) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        const conversationTheme = this.detectConversationTheme(context);
        
        if (conversationTheme === 'games' && message.includes('—Ä–µ–∫–æ–º–µ–Ω–¥')) {
            return "–†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å 2048 - –æ–Ω–∞ –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É! –ò–ª–∏ –º–æ–∂–µ—Ç Memory Cards –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–∞–º—è—Ç–∏?";
        }
        
        if (conversationTheme === 'tools' && message.includes('–ª—É—á—à')) {
            return "–í—Å–µ –Ω–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ-—Å–≤–æ–µ–º—É —Ö–æ—Ä–æ—à–∏! –î–ª—è —É—á–µ–±—ã - Neuron Study, –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤ - –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏ –±—é–¥–∂–µ—Ç, –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π - –∏–≥—Ä—ã!";
        }
        
        if (conversationTheme === 'team' && message.includes('–ø–ª–∞–Ω—ã')) {
            return "–ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏! –°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∏–≥—Ä—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ";
        }
        
        return this.generateSmartResponse(message);
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    getContextualConversationalResponse(message, context) {
        const theme = this.detectConversationTheme(context);
        
        const contextualResponses = {
            'games': [
                "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–º—É –∏–≥—Ä? –ú–æ–∂–µ—Ç, –æ—Ç–∫—Ä–æ–µ–º Game Hub –∏ –≤—ã–±–µ—Ä–µ–º —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ? üéÆ",
                "–ò–≥—Ä—ã - —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ! –ï—Å—Ç—å –ª—é–±–∏–º—ã–π –∂–∞–Ω—Ä? –ú–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!",
                "–û–±–æ–∂–∞—é –æ–±—Å—É–∂–¥–∞—Ç—å –∏–≥—Ä—ã! –í –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ—Ç —á—Ç–æ-—Ç–æ –ø–æ –¥—É—à–µ!",
            ],
            'tools': [
                "–ì–æ–≤–æ—Ä–∏–º –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö? –ö–∞–∫–æ–π –∏–∑ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? üõ†Ô∏è",
                "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Neuron —Å–æ–∑–¥–∞–Ω—ã —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∂–∏–∑–Ω—å! –ö–∞–∫–æ–π —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?",
                "–û–±—Å—É–∂–¥–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏? –í—Å–µ –Ω–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!",
            ],
            'team': [
                "–ö–æ–º–∞–Ω–¥–∞ Neuron –≤—Å–µ–≥–¥–∞ —Ä–∞–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏! –ï—Å—Ç—å –∏–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è? üí°",
                "–ú—ã, –º–æ–ª–æ–¥—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–µ –º–Ω–µ–Ω–∏–µ! –ß—Ç–æ –¥—É–º–∞–µ—à—å –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö?",
                "–°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –≤ 14 –ª–µ—Ç - —ç—Ç–æ –≤—ã–∑–æ–≤, –Ω–æ –º—ã —Å–ø—Ä–∞–≤–ª—è–µ–º—Å—è! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –Ω–∞—Å? ‚ú®",
            ],
            'default': [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∏–º –±–µ—Å–µ–¥—É? –ú–æ–∂–µ—Ç, —Ä–∞—Å—Å–∫–∞–∂–µ—à—å —á—Ç–æ –¥—É–º–∞–µ—à—å –æ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö? üòä",
                "–õ—é–±–ª—é —Ç–∞–∫–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã! –ö—Å—Ç–∞—Ç–∏, –Ω–µ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ Neuron Ecosystem? üöÄ",
                "–ü—Ä–∏—è—Ç–Ω–æ –æ–±—â–∞—Ç—å—Å—è! –ù–∞–ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫–∏–µ —É –Ω–∞—Å –µ—Å—Ç—å –∫—Ä—É—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã? üí´",
                "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥? –ú–æ–∂–µ—Ç, –ø–µ—Ä–µ–π–¥–µ–º –∫ —á–µ–º—É-—Ç–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É? üéØ",
            ]
        };
        
        const responses = contextualResponses[theme] || contextualResponses.default;
        return responses[Math.floor(Math.random() * responses.length)];
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    detectConversationTheme(context) {
        const recentMessages = context.slice(-3).map(msg => msg.text).join(' ').toLowerCase();
        
        if (recentMessages.includes('–∏–≥—Ä') || recentMessages.includes('game')) {
            return 'games';
        }
        
        if (recentMessages.includes('–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç') || recentMessages.includes('—Å–µ—Ä–≤–∏—Å') || 
            recentMessages.includes('–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä') || recentMessages.includes('–±—é–¥–∂–µ—Ç') || 
            recentMessages.includes('–∑–∞–º–µ—Ç–∫') || recentMessages.includes('—Å—Ç—É–¥')) {
            return 'tools';
        }
        
        if (recentMessages.includes('–∫–æ–º–∞–Ω–¥–∞') || recentMessages.includes('—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫') || 
            recentMessages.includes('—Å–æ–∑–¥–∞—Ç–µ–ª—å') || recentMessages.includes('–≤–æ–∑—Ä–∞—Å—Ç')) {
            return 'team';
        }
        
        return 'default';
    }

    // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    toggleFullscreen() {
        const widget = document.getElementById('aiWidget');
        widget.classList.toggle('fullscreen');
        
        if (widget.classList.contains('fullscreen')) {
            this.sendResponse('–ü–µ—Ä–µ–∫–ª—é—á–∞—é –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º! üñ•Ô∏è');
            document.body.style.overflow = 'hidden';
        } else {
            this.sendResponse('–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º! üì±');
            document.body.style.overflow = 'auto';
        }
        
        // –ü–µ—Ä–µ—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞ input
        setTimeout(() => {
            document.getElementById('aiInput').focus();
        }, 300);
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    clearContext() {
        this.conversationContext = [];
        this.saveContext();
        this.sendResponse('–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É! –û —á–µ–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? üí´');
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    saveContext() {
        try {
            localStorage.setItem('neuronAI_context', JSON.stringify(this.conversationContext));
        } catch (e) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç');
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    loadContext() {
        try {
            const saved = localStorage.getItem('neuronAI_context');
            if (saved) {
                this.conversationContext = JSON.parse(saved);
            }
        } catch (e) {
            this.conversationContext = [];
        }
    }

    findLocalResponse(message) {
        for (const [key, response] of Object.entries(this.responses)) {
            if (message.includes(key)) {
                return response;
            }
        }
        return null;
    }

    // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    calculateMath(message) {
        try {
            let expression = message
                .replace(/–ø–æ—Å—á–∏—Ç–∞–π|—Ä–µ—à–∏|—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç|–≤—ã—á–∏—Å–ª–∏|–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä|—Å–ª–æ–∂–∏|—É–º–Ω–æ–∂—å|—Ä–∞–∑–¥–µ–ª–∏|–≤—ã—á—Ç–∏/gi, '')
                .replace(/[^\d+\-*/().,\s]/g, '')
                .trim();

            expression = expression.replace(/,/g, '.');

            if (!this.isValidMathExpression(expression)) {
                return this.sendResponse('–ù–µ –º–æ–≥—É —Ä–µ—à–∏—Ç—å —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—Ç–æ-—Ç–æ –ø—Ä–æ—â–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ø–æ—Å—á–∏—Ç–∞–π 2+2" –∏–ª–∏ "—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 15*3"');
            }

            const result = this.safeEval(expression);
            
            if (result === null || isNaN(result)) {
                return this.sendResponse('–ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è!');
            }

            this.sendResponse(`üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${expression} = **${result}**`);

        } catch (error) {
            this.sendResponse('–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.');
        }
    }

    isValidMathExpression(expr) {
        if (!expr || expr.length > 50) return false;
        
        const validChars = /^[\d+\-*/().\s]+$/;
        if (!validChars.test(expr)) return false;

        let balance = 0;
        for (let char of expr) {
            if (char === '(') balance++;
            if (char === ')') balance--;
            if (balance < 0) return false;
        }
        
        return balance === 0;
    }

    safeEval(expression) {
        try {
            const cleanExpr = expression
                .replace(/[^0-9+\-*/().]/g, '')
                .replace(/(\d)\(/g, '$1*(')
                .replace(/\)(\d)/g, ')*$1');

            return Function(`"use strict"; return (${cleanExpr})`)();
        } catch (error) {
            return null;
        }
    }

    generateSmartResponse(message) {
        // ... (–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    }

    containsMath(text) {
        const mathPatterns = [/–ø–æ—Å—á–∏—Ç–∞–π/, /—Ä–µ—à–∏/, /—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç/, /–≤—ã—á–∏—Å–ª–∏/, /—Å–ª–æ–∂–∏/, /—É–º–Ω–æ–∂—å/, /—Ä–∞–∑–¥–µ–ª–∏/, /–≤—ã—á—Ç–∏/, /[\d+\-*/().]+[+\-*/][\d+\-*/().]+/];
        return mathPatterns.some(pattern => pattern.test(text.toLowerCase()));
    }

    isGreeting(text) {
        const greetings = ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π', '—Ö–∞–π', 'hello', 'hi', '–∑–¥–∞—Ä–æ–≤', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä'];
        return greetings.some(greet => text.toLowerCase().includes(greet));
    }

    isGoodbye(text) {
        const goodbyes = ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–ø—Ä–æ—â–∞–π', 'bye', 'goodbye', '—É–¥–∞—á–∏', '–¥–æ –≤—Å—Ç—Ä–µ—á–∏', '–≤—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ'];
        return goodbyes.some(bye => text.toLowerCase().includes(bye));
    }

    isPersonalQuestion(text) {
        const personal = ['—á—É–≤—Å—Ç–≤—É–µ—à—å', '—á—É–≤—Å—Ç–≤–∞', '—ç–º–æ—Ü–∏–∏', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '–ª—é–±–∏—à—å', '—Ö–æ—á–µ—à—å', '–º–µ—á—Ç–∞–µ—à—å'];
        return personal.some(word => text.toLowerCase().includes(word));
    }

    containsQuestion(text) {
        const questionWords = ['–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫—Ç–æ', '—á–µ–π', '–∫–æ—Ç–æ—Ä—ã–π', '–∫–∞–∫–æ–π', '—Å–∫–æ–ª—å–∫–æ'];
        return questionWords.some(word => text.toLowerCase().includes(word)) || text.includes('?');
    }

    getPersonalResponse() {
        const responses = [
            "–Ø AI, –ø–æ—ç—Ç–æ–º—É —É –º–µ–Ω—è –Ω–µ—Ç —á—É–≤—Å—Ç–≤ –∫–∞–∫ —É —á–µ–ª–æ–≤–µ–∫–∞, –Ω–æ —è –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ–≥–∞—Ç—å! üòä",
            "–ö–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —è –Ω–µ –∏—Å–ø—ã—Ç—ã–≤–∞—é —ç–º–æ—Ü–∏–π, –Ω–æ –º–æ—è —Ü–µ–ª—å - –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è —Ç–µ–±—è! üåü",
            "–£ –º–µ–Ω—è –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏, –Ω–æ —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –¥–∏–∞–ª–æ–≥—É! üí™",
            "–Ø –ø—Ä–æ–≥—Ä–∞–º–º–∞, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–≥—É –≥—Ä—É—Å—Ç–∏—Ç—å –∏–ª–∏ —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è, –Ω–æ –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä! ‚ú®"
        ];
        return responses[Math.floor(Math.random() * responses.length)];
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    showHelp() {
        const helpText = `
üéØ **Neuron Ecosystem - –ü–æ–ª–Ω—ã–π –≥–∏–¥:**

üè† **–û—Å–Ω–æ–≤–Ω—ã–µ —Å–∞–π—Ç—ã:**
‚Ä¢ –ì–ª–∞–≤–Ω—ã–π —Å–∞–π—Ç - neuron-p2p.ru
‚Ä¢ Digital Studio (–æ–ø–∏—Å–∞–Ω–∏–µ) - neuron-p2p.ru/studio.html  
‚Ä¢ Digital Studio (—Å–∞–π—Ç-–≤–∏–∑–∏—Ç–∫–∞) - neurondigital.tilda.ws

üõ†Ô∏è **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:**
‚Ä¢ üéÆ Game Hub - –∫–æ–ª–ª–µ–∫—Ü–∏—è –∏–≥—Ä
‚Ä¢ üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç 
‚Ä¢ üìù –ó–∞–º–µ—Ç–∫–∏ –∏ –æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä
‚Ä¢ üéì Neuron Study - —É—á–µ–±–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ üí∞ Neuron Budget - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–æ–º
‚Ä¢ üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π

üì± **–°–æ—Ü—Å–µ—Ç–∏:**
‚Ä¢ üì¢ Telegram –∫–∞–Ω–∞–ª
‚Ä¢ üë• –°–æ–æ–±—â–µ—Å—Ç–≤–æ –í–ö  
‚Ä¢ üéµ TikTok

üßÆ **–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞:**
–ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏: "–ø–æ—Å—á–∏—Ç–∞–π 2+2" –∏–ª–∏ "—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 15*3"

üí¨ **–û–±—â–µ–Ω–∏–µ:**
–ú–æ–≥—É –ø–æ—à—É—Ç–∏—Ç—å, –¥–∞—Ç—å —Å–æ–≤–µ—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å!

üñ•Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º:**
"–ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω" - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å —á–∞—Ç
"–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º" - –≤–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
"–æ—á–∏—Å—Ç–∏ —á–∞—Ç" - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
"–Ω–æ–≤–∞—è —Ç–µ–º–∞" - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ

üí° **–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:**
"–æ—Ç–∫—Ä–æ–π –∏–≥—Ä—ã", "—Ç–µ–ª–µ–≥—Ä–∞–º", "–ø–æ—Å—á–∏—Ç–∞–π 25*4", "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", "—à—É—Ç–∫–∞"

–°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –∫–æ–º–∞–Ω–¥–æ–π Neuron (14 –ª–µ—Ç)
    `;
        this.sendResponse(helpText);
    }

    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    openGames() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é Game Hub... üéÆ');
        setTimeout(() => {
            window.open('https://neuron-ecosystem.github.io/Game-Hub/', '_blank');
        }, 1000);
    }

    openConverter() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç... üí±');
        setTimeout(() => {
            window.open('https://neuron-ecosystem.github.io/Unit-Converter/', '_blank');
        }, 1000);
    }

    openNotes() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é –∑–∞–º–µ—Ç–∫–∏... üìù');
        setTimeout(() => {
            window.open('https://neuron-p2p.ru/notes.html', '_blank');
        }, 1000);
    }

    openSchedule() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é Neuron Study... üéì');
        setTimeout(() => {
            window.open('https://neuron-ecosystem.github.io/Neuron-Study/', '_blank');
        }, 1000);
    }

    openPasswordGenerator() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π... üîê');
        setTimeout(() => {
            window.open('https://neuron-ecosystem.github.io/Password-Generator/', '_blank');
        }, 1000);
    }

    openNeuronStudy() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é Neuron Study... üìö');
        setTimeout(() => {
            window.open('https://neuron-ecosystem.github.io/Neuron-Study/', '_blank');
        }, 1000);
    }

    openMainSite() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é –≥–ª–∞–≤–Ω—ã–π —Å–∞–π—Ç Neuron... üè†');
        setTimeout(() => {
            window.open('https://neuron-p2p.ru/', '_blank');
        }, 1000);
    }

    openDigitalStudio() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é Neuron Digital Studio... üé®');
        setTimeout(() => {
            window.open('https://neuron-p2p.ru/studio.html', '_blank');
        }, 1000);
    }

    openStudioSite() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é —Å–∞–π—Ç-–≤–∏–∑–∏—Ç–∫—É Digital Studio... üíº');
        setTimeout(() => {
            window.open('http://neurondigital.tilda.ws/', '_blank');
        }, 1000);
    }

    openNeuronBudget() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é Neuron Budget... üí∞');
        setTimeout(() => {
            window.open('https://neuron-ecosystem.github.io/Neuron-Budget/', '_blank');
        }, 1000);
    }

    openTelegram() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é Telegram –∫–∞–Ω–∞–ª... üì¢');
        setTimeout(() => {
            window.open('https://t.me/neuron_ecosystem', '_blank');
        }, 1000);
    }

    openVK() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ... üë•');
        setTimeout(() => {
            window.open('https://vk.com/club233118101', '_blank');
        }, 1000);
    }

    openTikTok() {
        this.sendResponse('–û—Ç–∫—Ä—ã–≤–∞—é TikTok... üéµ');
        setTimeout(() => {
            window.open('https://www.tiktok.com/@neuron_eco', '_blank');
        }, 1000);
    }

    showSocials() {
        const socialsText = `
üì± **–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏:**

üì¢ Telegram: https://t.me/neuron_ecosystem
üë• –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: https://vk.com/club233118101  
üéµ TikTok: https://www.tiktok.com/@neuron_eco

üíå –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!
    `;
        this.sendResponse(socialsText);
    }

    // –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    getGreeting() {
        const greetings = [
            "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üéâ –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! üëã –û—á–µ–Ω—å —Ä–∞–¥ –Ω–∞—à–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä—É! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?",
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üòä –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ–±—â–µ–Ω–∏—è, –Ω–µ –Ω–∞—Ö–æ–¥–∏—à—å?",
            "–ô–æ—É! üöÄ –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –¥–∏–∞–ª–æ–≥—É?",
            "–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –∑–∞—à–µ–ª! üí´ –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?"
        ];
        return greetings[Math.floor(Math.random() * greetings.length)];
    }

    getMood() {
        const moods = [
            "–û—Ç–ª–∏—á–Ω–æ! –û—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ –ø–æ–º–æ–≥–∞—é —Ç–∞–∫–∏–º –∫—Ä—É—Ç—ã–º –ª—é–¥—è–º –∫–∞–∫ —Ç—ã! üòÑ",
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —É—á—É—Å—å —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É –≤–º–µ—Å—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏! üåü",
            "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ê –∫–∞–∫ —É —Ç–µ–±—è? –†–∞—Å—Å–∫–∞–∂–µ—à—å? üëÇ",
            "–ù–∞ –≤—Å–µ 100%! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–∞–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º! üí™",
            "–õ—É—á—à–µ –Ω–µ –±—ã–≤–∞–µ—Ç! –û—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ –æ–±—â–∞—é—Å—å —Å —Ç–æ–±–æ–π! ‚ú®"
        ];
        return moods[Math.floor(Math.random() * moods.length)];
    }

    getThanksResponse() {
        const thanks = [
            "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Å—è –µ—â–µ! üòä",
            "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! –ï—Å–ª–∏ —á—Ç–æ - —è –≤—Å–µ–≥–¥–∞ —Ç—É—Ç! ü§ó",
            "–ù–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏! –î–ª—è —ç—Ç–æ–≥–æ —è –∏ —Å–æ–∑–¥–∞–Ω - –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º! üåü",
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –ù–∞–¥–µ—é—Å—å, —è –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω! üí´",
            "–û–±—Ä–∞—â–∞–π—Å—è! –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å —Å–Ω–æ–≤–∞! üöÄ"
        ];
        return thanks[Math.floor(Math.random() * responses.length)];
    }

    getGoodbye() {
        const goodbyes = [
            "–ü–æ–∫–∞-–ø–æ–∫–∞! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–∫–æ—Ä–µ–µ! –ë—É–¥—É —Å–∫—É—á–∞—Ç—å! üòä",
            "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ù–∞–¥–µ—é—Å—å, –º—ã —Å–∫–æ—Ä–æ —Å–Ω–æ–≤–∞ –ø–æ–æ–±—â–∞–µ–º—Å—è! üëã",
            "–ü–æ–∫–∞! –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –Ω–∞—à–∏ –∫—Ä—É—Ç—ã–µ —Å–µ—Ä–≤–∏—Å—ã! üéØ",
            "–î–æ —Å–∫–æ—Ä–æ–≥–æ! –ñ–¥—É –Ω–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞! üí´",
            "–ü–æ–∫–∞! –£–¥–∞—á–∏ –≤–æ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏—è—Ö! üöÄ"
        ];
        return goodbyes[Math.floor(Math.random() * goodbyes.length)];
    }

    getAboutMe() {
        return '–Ø Neuron AI - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Neuron. –°–æ–∑–¥–∞–Ω —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö!';
    }

    getAboutNeuron() {
        return 'Neuron Ecosystem - —ç—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª–µ–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∏–≥—Ä, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–æ–ª–æ–¥–æ–π –∫–æ–º–∞–Ω–¥–æ–π. –í–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç, –∏–≥—Ä—ã, –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!';
    }

    getAboutMeExtended() {
        return `–ö–æ–Ω–µ—á–Ω–æ! –†–∞—Å—Å–∫–∞–∂—É –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ! üòä

ü§ñ **–Ø - Neuron AI**
–Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Neuron. –ú–æ—è –º–∏—Å—Å–∏—è - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö –∏ –¥–µ–ª–∞—Ç—å –∏—Ö –æ–ø—ã—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º!

üéØ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã Neuron Ecosystem
‚Ä¢ –†–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
‚Ä¢ –û–±—â–∞—Ç—å—Å—è –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫
‚Ä¢ –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –∏ —à—É—Ç–∫–∏
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π

üí° **–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:**
–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∞ –∫–æ–º–∞–Ω–¥–∞ 14-–ª–µ—Ç–Ω–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤! –≠—Ç–æ –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç - –Ω–µ –ø—Ä–µ–≥—Ä–∞–¥–∞ –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π!

–ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –µ—â–µ?`;
    }

    getCapabilities() {
        return `–Ø —É–º–µ—é –¥–æ–≤–æ–ª—å–Ω–æ –º–Ω–æ–≥–æ! –í–æ—Ç –º–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: üöÄ

üß≠ **–ù–∞–≤–∏–≥–∞—Ü–∏—è:**
–ú–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å –ª—é–±–æ–π —Å–∞–π—Ç Neuron Ecosystem - –æ—Ç –∏–≥—Ä –¥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

üßÆ **–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞:**
–†–µ—à–∞—é –ø—Ä–∏–º–µ—Ä—ã, —Å—á–∏—Ç–∞—é –ø—Ä–æ—Ü–µ–Ω—Ç—ã, —Ä–∞–±–æ—Ç–∞—é —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏

üí¨ **–û–±—â–µ–Ω–∏–µ:**
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –±–µ—Å–µ–¥—É, —à—É—á—É, –¥–∞—é —Å–æ–≤–µ—Ç—ã, –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã

üîß **–ü–æ–º–æ—â—å:**
–†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –æ –ø—Ä–æ–µ–∫—Ç–µ, –ø–æ–º–æ–≥–∞—é –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö

üì± **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:**
–†–∞–±–æ—Ç–∞—é —Å–æ –≤—Å–µ–º–∏ –Ω–∞—à–∏–º–∏ —Å–æ—Ü—Å–µ—Ç—è–º–∏ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏

–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?`;
    }

    getJoke() {
        const jokes = [
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 = Dec 25! üéÉ",
            "–ö–∞–∫–æ–π —É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ —Ç–æ—Å—Ç? –ë—É–¥—å—Ç–µ –∑–¥–æ—Ä–æ–≤—ã, 10100110101! ü•Ç",
            "–ü–æ—á–µ–º—É Python —Å—Ç–∞–ª —Ç–∞–∫–∏–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–º? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –Ω–µ—Ç –∑–º–µ–π! üêç",
            "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤–∫—Ä—É—Ç–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É? –ù–∏ –æ–¥–Ω–æ–≥–æ, —ç—Ç–æ hardware –ø—Ä–æ–±–ª–µ–º–∞! üí°",
            "–ü–æ—á–µ–º—É JavaScript —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—à–µ–ª –≤ –±–∞—Ä? –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ undefined! üçª"
        ];
        return jokes[Math.floor(Math.random() * jokes.length)];
    }

    getAdvice() {
        const advice = [
            "üéØ –°–æ–≤–µ—Ç –æ—Ç AI: –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞–≤–∞–π —É—á–∏—Ç—å—Å—è! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ!",
            "üí° –ò–¥–µ—è: –ü–æ–ø—Ä–æ–±—É–π —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ –¥–∞–≤–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–ª. –¢—ã —É–¥–∏–≤–∏—à—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É!",
            "üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Neuron - –æ–Ω–∏ —Å–æ–∑–¥–∞–Ω—ã, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–≤–æ—é –∂–∏–∑–Ω—å!",
            "üåü –ú—ã—Å–ª—å: –°–∞–º—ã–µ –∫—Ä—É—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –ø—Ä–æ—Å—Ç–æ–π –∏–¥–µ–∏. –ù–µ –±–æ–π—Å—è –º–µ—á—Ç–∞—Ç—å –º–∞—Å—à—Ç–∞–±–Ω–æ!",
            "üìö –ù–∞–ø—É—Ç—Å—Ç–≤–∏–µ: –ü–æ–º–Ω–∏, –¥–∞–∂–µ —Å–∞–º—ã–µ –æ–ø—ã—Ç–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–≥–¥–∞-—Ç–æ –Ω–∞—á–∏–Ω–∞–ª–∏ —Å 'Hello World'!"
        ];
        return advice[Math.floor(Math.random() * advice.length)];
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º
    addMessage(text, sender) {
        this.chatHistory.push({ text, sender, timestamp: Date.now() });
        this.renderMessage(text, sender);
        this.saveChatHistory();
    }

    renderMessage(text, sender) {
        const chat = document.getElementById('aiChat');
        const messageDiv = document.createElement('div');
        messageDiv.className = `ai-message ${sender}-message`;
        
        const avatar = sender === 'user' ? 'üë§' : 'üß†';
        messageDiv.innerHTML = `
            <div class="message-avatar">${avatar}</div>
            <div class="message-content">
                <p>${text}</p>
            </div>
        `;
        
        chat.appendChild(messageDiv);
        chat.scrollTop = chat.scrollHeight;
    }

    sendResponse(text) {
        this.addMessage(text, 'bot');
        this.addToContext(text, 'bot');
    }

    showTypingIndicator() {
        const chat = document.getElementById('aiChat');
        const typingDiv = document.createElement('div');
        typingDiv.className = 'ai-message bot-message';
        typingDiv.id = 'typingIndicator';
        typingDiv.innerHTML = `
            <div class="message-avatar">üß†</div>
            <div class="message-content">
                <div class="typing-indicator">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>
        `;
        chat.appendChild(typingDiv);
        chat.scrollTop = chat.scrollHeight;
    }

    hideTypingIndicator() {
        const typing = document.getElementById('typingIndicator');
        if (typing) typing.remove();
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    saveChatHistory() {
        if (this.chatHistory.length > 50) {
            this.chatHistory = this.chatHistory.slice(-50);
        }
        localStorage.setItem('neuronAI_chat', JSON.stringify(this.chatHistory));
    }

    loadChatHistory() {
        try {
            const saved = localStorage.getItem('neuronAI_chat');
            if (saved) {
                this.chatHistory = JSON.parse(saved);
                this.renderChatHistory();
            }
        } catch (e) {
            this.chatHistory = [];
        }
        this.loadContext();
    }

    renderChatHistory() {
        const chat = document.getElementById('aiChat');
        chat.innerHTML = '';
        
        const welcomeMsg = document.createElement('div');
        welcomeMsg.className = 'ai-message bot-message';
        welcomeMsg.innerHTML = `
            <div class="message-avatar">üß†</div>
            <div class="message-content">
                <p>–ü—Ä–∏–≤–µ—Ç! –Ø Neuron AI - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ Neuron. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?</p>
                <div class="quick-commands">
                    <button onclick="sendQuickCommand('–ø–æ–º–æ—â—å')">üÜò –ü–æ–º–æ—â—å</button>
                    <button onclick="sendQuickCommand('–∏–≥—Ä—ã')">üéÆ –ò–≥—Ä—ã</button>
                    <button onclick="sendQuickCommand('–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä')">üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä</button>
                    <button onclick="sendQuickCommand('–∑–∞–º–µ—Ç–∫–∏')">üìù –ó–∞–º–µ—Ç–∫–∏</button>
                    <button onclick="sendQuickCommand('–ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω')">üñ•Ô∏è –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω</button>
                </div>
            </div>
        `;
        chat.appendChild(welcomeMsg);
        
        this.chatHistory.forEach(msg => {
            this.renderMessage(msg.text, msg.sender);
        });
    }

    setupEventListeners() {
        const widget = document.getElementById('aiWidget');
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.attributeName === 'class') {
                    if (widget.classList.contains('active')) {
                        setTimeout(() => {
                            document.getElementById('aiInput').focus();
                        }, 300);
                    }
                }
            });
        });
        observer.observe(widget, { attributes: true });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
let neuronAI;

function toggleAI() {
    const widget = document.getElementById('aiWidget');
    widget.classList.toggle('active');
    
    if (widget.classList.contains('active')) {
        setTimeout(() => {
            document.getElementById('aiInput').focus();
        }, 300);
    }
}

function sendAIMessage() {
    const input = document.getElementById('aiInput');
    const message = input.value.trim();
    
    if (message) {
        neuronAI.processMessage(message);
        input.value = '';
    }
}

function handleAIInput(event) {
    if (event.key === 'Enter') {
        sendAIMessage();
    }
}

function sendQuickCommand(command) {
    neuronAI.processMessage(command);
}

function startVoiceInput() {
    if ('webkitSpeechRecognition' in window) {
        const recognition = new webkitSpeechRecognition();
        recognition.lang = 'ru-RU';
        recognition.onresult = (event) => {
            const transcript = event.results[0][0].transcript;
            document.getElementById('aiInput').value = transcript;
            sendAIMessage();
        };
        recognition.start();
        
        neuronAI.sendResponse('üé§ –°–ª—É—à–∞—é... –ì–æ–≤–æ—Ä–∏—Ç–µ!');
    } else {
        neuronAI.sendResponse('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    }
}

function clearChat() {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?')) {
        neuronAI.chatHistory = [];
        neuronAI.saveChatHistory();
        neuronAI.clearContext();
        document.getElementById('aiChat').innerHTML = `
            <div class="ai-message bot-message">
                <div class="message-avatar">üß†</div>
                <div class="message-content">
                    <p>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?</p>
                    <div class="quick-commands">
                        <button onclick="sendQuickCommand('–ø–æ–º–æ—â—å')">üÜò –ü–æ–º–æ—â—å</button>
                        <button onclick="sendQuickCommand('–∏–≥—Ä—ã')">üéÆ –ò–≥—Ä—ã</button>
                        <button onclick="sendQuickCommand('–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä')">üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä</button>
                        <button onclick="sendQuickCommand('–∑–∞–º–µ—Ç–∫–∏')">üìù –ó–∞–º–µ—Ç–∫–∏</button>
                        <button onclick="sendQuickCommand('–ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω')">üñ•Ô∏è –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω</button>
                    </div>
                </div>
            </div>
        `;
    }
}

function toggleFullscreen() {
    neuronAI.toggleFullscreen();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    neuronAI = new NeuronAI();
});
